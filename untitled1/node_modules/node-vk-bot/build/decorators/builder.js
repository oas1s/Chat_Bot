"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var glob = require("glob");
var StoreMetadata_1 = require("./StoreMetadata");
function build(bot, controllers) {
    if (!controllers.every(function (value) { return value instanceof Function; }))
        controllers.forEach(function (value) { return glob.sync(path.normalize(value)).filter(function (file) {
            return file.substring(file.length - 5, file.length) !== '.d.ts';
        }).forEach(function (dir) { return require(dir); }); });
    StoreMetadata_1.default.vkControllerMetadata.forEach(function (controller) {
        var controllerInstance = new controller.target(bot);
        StoreMetadata_1.default.getMetadata
            .filter(function (get) { return get.target === controller.target.prototype; })
            .forEach(function (getMetadata) {
            bot.get(getMetadata.pattern, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                controllerInstance[getMetadata.propertyKey].apply(controllerInstance, args);
            });
        });
        StoreMetadata_1.default.getPayloadMetadata
            .filter(function (get) { return get.target === controller.target.prototype; })
            .forEach(function (getMetadata) {
            bot.getPayload(getMetadata.jsonString, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                controllerInstance[getMetadata.propertyKey].apply(controllerInstance, args);
            });
        });
        StoreMetadata_1.default.anyMetadata
            .filter(function (get) { return get.target === controller.target.prototype; })
            .forEach(function (anyMetadata) {
            bot.on(anyMetadata.name, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                controllerInstance[anyMetadata.propertyKey].apply(controllerInstance, args);
            });
        });
    });
}
exports.build = build;
