"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var KeyboardColor;
(function (KeyboardColor) {
    KeyboardColor["PRIMARY"] = "primary";
    KeyboardColor["DEFAULT"] = "default";
    KeyboardColor["NEGATIVE"] = "negative";
    KeyboardColor["POSITIVE"] = "positive";
})(KeyboardColor = exports.KeyboardColor || (exports.KeyboardColor = {}));
var Keyboard = (function () {
    function Keyboard(oneTime) {
        if (oneTime === void 0) { oneTime = false; }
        this.obj = { one_time: oneTime, buttons: [] };
    }
    Keyboard.prototype.addButton = function (label, color, payload) {
        if (color === void 0) { color = KeyboardColor.DEFAULT; }
        if (payload === void 0) { payload = null; }
        if (!this.obj.buttons.length)
            this.obj.buttons.push([]);
        var lastRow = this.obj.buttons[this.obj.buttons.length - 1];
        if (lastRow.length === 4)
            throw new Error('Maximum amount of buttons in one row = 4');
        lastRow.push({ action: { type: 'text', label: label, payload: payload }, color: color });
        return this;
    };
    Keyboard.prototype.addRow = function () {
        if (this.obj.buttons.length === 10)
            throw new Error('Maximum amount of rows = 10');
        this.obj.buttons.push([]);
        return this;
    };
    Keyboard.prototype.toString = function () { return JSON.stringify(this.obj); };
    return Keyboard;
}());
exports.default = Keyboard;
